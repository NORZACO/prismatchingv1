generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// // MODELS IN DATABASE
// model AuthUser {
//   id           Int       @id @default(autoincrement())
//   password     String    @db.VarChar(128)
//   last_login   DateTime? @db.Timestamptz(6)
//   is_superuser Boolean
//   username     String    @unique @db.VarChar(150)
//   first_name   String    @db.VarChar(150)
//   last_name    String    @db.VarChar(150)
//   email        String    @unique @db.VarChar(254)
//   is_staff     Boolean
//   is_active    Boolean
//   date_joined  DateTime  @db.Timestamptz(6)

//   // Define relationships with other tables if needed
//   auth_user_groups           AuthUserGroup[]
//   auth_user_user_permissions AuthUserUserPermission[]
//   bloge_post                 BlogePost[]
//   django_admin_log           DjangoAdminLog[]

//   @@index([username], map: "auth_user_username_6821ab7c_like")
// }

// model AuthUserGroup {
//   id BigInt @id @default(autoincrement())

//   AuthUser   AuthUser? @relation(fields: [authUserId], references: [id])
//   authUserId Int?
// }

// model AuthUserUserPermission {
//   id BigInt @id @default(autoincrement())

//   AuthUser   AuthUser? @relation(fields: [authUserId], references: [id])
//   authUserId Int?
// }

// model BlogePost {
//   id BigInt @id @default(autoincrement())

//   AuthUser   AuthUser? @relation(fields: [authUserId], references: [id])
//   authUserId Int?
// }

// model DjangoAdminLog {
//   id BigInt @id @default(autoincrement())

//   AuthUser   AuthUser? @relation(fields: [authUserId], references: [id])
//   authUserId Int?
// }

model authGroup {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique @db.VarChar(150)
  // auth_group_permissions auth_group_permissions[]
  // auth_user_groups       auth_user_groups[]

  @@index([name], map: "auth_group_name_a6ea08ec_like")
}



model authUser {
  id           Int              @id @default(autoincrement())
  password     String           @db.VarChar(128)
  last_login   DateTime?        @db.Timestamptz(6)
  is_superuser Boolean
  username     String           @db.VarChar(150)
  irst_name    String           @db.VarChar(150)
  last_name    String           @db.VarChar(150)
  email        String           @db.VarChar(150)
  is_staff     Boolean
  is_active    Boolean
  date_joined  DateTime         @db.Timestamptz(6)
  userGroup    authUserGroups[] // All user will have a specific group
}



model authUserGroups {
    id         BigInt     @id @default(autoincrement())
  user_id    Int
  group_id   Int
  auth_group auth_group @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_groups_group_id_97559544_fk_auth_group_id")
  auth_user  auth_user  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_groups_user_id_6a12ed8b_fk_auth_user_id")

}
